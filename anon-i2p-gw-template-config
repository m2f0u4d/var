#!/bin/sh



set -e

LOGPATH="/var/log/anon-i2p-config.log"

disclaimer() {
echo "Disclaimer \n"
echo "This script will makes persistent changes to Whonix "
echo "It could degrease your Anonymity or make Whonix Leak Information"
echo "If you rely on strong Anonymity and are exposed to a large Advesary"
echo "!!If any of that's the case Please dont use this !!"
echo "The Author takes no Responsibility if anything breaks \n"
echo "The following changes will be made:\n"
echo "--Add the I2P Repositories"
echo "--Update the system's packages" 
echo "--Install I2P, custom Init.d script"
echo "--Configure Firewall Settings to Only Allow I2P to connect to the Clearnet"
echo "--Make I2P's directories persistent \n"
echo "--Enabling Whonix-Gateways Own Traffic Transparent Proxy feature"



echo -n "Are you sure you wish to continue? (y/n)  " 

read ans 
case $ans in 

    y*|Y*|j*|J*) 
        ;; 
    *) 
        exit 0 
        ;; 
esac 
}

install_i2p() {
echo "Installing I2P \n"
echo "Adding the I2P Repository to the Apt list"
#Add I2P Repo
cat  > /etc/apt/sources.list.d/i2p.list << EOF
deb http://deb.i2p2.no/ stable main
#deb-src http://deb.i2p2.no/ stable main
EOF
echo "OK"

sleep 1
echo "Adding the I2P Repo key if not present "
# Add the I2P repo key if apt doesn't know about it yet
if ! apt-key fingerprint | fgrep -q "7840 E761 0F28 B904 7535  49D7 67EC E560 5BCF 1346" > /dev/null 2>&1; then
    if wget --quiet https://geti2p.net/_static/i2p-debian-repo.key.asc -O $TMPFILE; then
        apt-key add $TMPFILE
        rm -f $TMPFILE
        
    else
        # Since fetching with wget failed, let's try getting it from a keyserver
        echo "Fetching with wget failed, let's try getting it from a keyserver"
        apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-key 0x67ECE5605BCF1346
        
    fi
fi
echo "[I2P Key Added] OK" >> $LOGPATH 
echo "OK"
apt-get update
apt-get install i2p i2p-keyring
#TODO Decide if we should set predefined settings here
#echo "i2p i2p/daemon boolean true" | debconf-set-selections

#Move Scripts to their right place whonix-i2p 30_i2p_start.sh 30-i2p.sh 30.i2p_restart.sh i2p_config_proxyvm
echo "\nMoving the Scripts and Icons to their proper place "
if [ ! -d /usr/lib/i2p/ ]; then dir /usr/lib/i2p
mv i2p.sh /usr/lib/i2p/
mv i2p-launcher /usr/bin/
mv /res/*.png /usr/share/icons/anon-icon-pack
mv 30_i2p_start.sh /etc/qubes/suspend-post.d/
mv 30_i2p_restart.sh /etc/qubes/suspend-pre.d/
echo "[Moving Scripts] OK" >> $LOGPATH 
I2PROUTER="/usr/bin/i2prouter"
# Install custom i2prouter stub scripts
for script in ${I2PROUTER} ${I2PROUTER}-nowrapper; do
    echo "Removing $script"
    dpkg-divert --rename --add "${script}"
    cat > "$script" << EOF
#!/bin/sh
echo "This script is not used by Whonix.\nUse sudo i2p-launcher start"
exit 0
EOF
    chmod 755 "$script"
done
echo "[Removing I2PRouter Script] OK" >> $LOGPATH
check_qubes_version
setup_firewall_rules
echo "[Adding I2P Firewall Config] OK" >> $LOGPATH
}

check_qubes_version(){
	if [ -e /usr/lib/qubes/bind-dirs.sh ] || [ -e /usr/lib/qubes/init/bind-dirs.sh ] ; then
		setup_persistent_path_qubes32
		echo "[Adding Peristent Path Config] OK" >> $LOGPATH


	else
		setup_persistent_path_qubes31
		echo "[Adding Peristent Path Config] OK" >> $LOGPATH

	fi	
}

setup_persistent_path_qubes32(){
	
echo "Adding I2P's paths to Qubes Persistent Folders"
BINDDIRS="/usr/lib/qubes-bind-dirs.d"
[ -d $BINDDIRS ] && 'folder already exists' || mkdir -p $BINDDIRS
#Add I2P's paths to Qubes Persistent Folders
cat >> "/usr/lib/qubes-bind-dirs.d/50_qubes-whonix.conf" << EOF
binds+=( '/etc/i2p' )
binds+=( '/var/lib/i2p/i2p-config/' )
EOF
}

setup_persistent_path_qubes31(){
#old path /usr/lib/qubes-whonix/bind-directories
#Currently used method 
#Add I2P's paths to Qubes Persistent Folders
sed -i "70i \    '/rw/srv/whonix/etc/i2p:/etc/i2p'" /usr/lib/qubes-whonix/bind-directories
sed -i "71i \    '/rw/srv/whonix/var/lib/i2p/i2p-config:/var/lib/i2p/i2p-config'" /usr/lib/qubes-whonix/bind-directories
sed -i "72i \    '/rw/srv/whonix/usr/share/i2p:/usr/share/i2p'" /usr/lib/qubes-whonix/bind-directories
echo "OK"
}

setup_firewall_rules(){
echo "Adding Whonix Firewall Rules"

#Add the needed Whonix Firewall User Rules so I2P can connect and is reachable by the Worksation
if grep -Fxq "SOCKS_PORT_I2P_WWW=4444" /etc/whonix_firewall.d/50_user.conf
then
    echo "Skipping Firewall Rules"
else
    cat >> "/etc/whonix_firewall.d/50_user.conf" << EOF
NO_NAT_USERS+=" $(id -u i2psvc)"
SOCKS_PORT_I2P_BOB=2827
SOCKS_PORT_I2P_TAHOE=3456
SOCKS_PORT_I2P_WWW=4444
SOCKS_PORT_I2P_WWW2=4445
SOCKS_PORT_I2P_IRC=6668
SOCKS_PORT_I2P_XMPP=7622
SOCKS_PORT_I2P_CONTROL=7650
SOCKS_PORT_I2P_SOCKSIRC=7651
SOCKS_PORT_I2P_SOCKS=7652
SOCKS_PORT_I2P_I2CP=7654
SOCKS_PORT_I2P_SAM=7656
SOCKS_PORT_I2P_EEP=7658
SOCKS_PORT_I2P_SMTP=7659
SOCKS_PORT_I2P_POP=7660
SOCKS_PORT_I2P_BOTESMTP=7661
SOCKS_PORT_I2P_BOTEIMAP=7662
SOCKS_PORT_I2P_MTN=8998
EOF
echo "OK"
fi



echo "Reloading Whonix Firewall"
#Reload Whonix Firewall
/usr/bin/whonix_firewall
sleep 1


chown -R i2psvc /usr/share/i2p/ 
chown -R i2psvc /var/lib/i2p/
echo "Done, now please restart the ProxyVM of this Template to finish the Setup"
}

if [ `id -u ` -ne 0 ]; then 

    echo "This script must be run as root" 

    exit 1 

fi

qubes_vm_type="$(qubesdb-read /qubes-vm-type)"
if [ -e /usr/share/anon-gw-base-files/gateway ]; then
    echo "Disclaimer \n"
   
fi
#check in what kind of VM we're runnign
if [ "$qubes_vm_type" = "TemplateVM" ]; then
    echo "Disclaimer \n"
    # Display warning that TemplateVM is not connected to a Tor update proxy.
    if [ ! -e '/var/run/qubes-service/whonix-secure-proxy' ]; then
        /usr/lib/qubes-whonix/alert update /usr/lib/qubes-whonix/messages.yaml
    fi    
    disclaimer
    install_i2p
    
fi
